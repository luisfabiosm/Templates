{
  "$schema": "http://json.schemastore.org/template",
  "author": "Fabio Magalhaes",
  "classifications": ["Microservice", "Web", "API", "Clean Architecture", "Hexagonal", "Ports and Adapters"],
  "identity": "microservice.cleanarch.api",
  "name": "Clean Architecture Microservice API Template",
  "shortName": "cleanarch.api",
  "sourceName": "microservice.api",
  "description": "Template para microserviços seguindo Clean Architecture, Hexagonal Architecture (Ports & Adapters), princípios SOLID, DRY, KISS e Object Calisthenics com foco em performance e baixo uso de memória.",
  "groupIdentity": "CleanArch.Microservice.API",
  "precedence": "9000",
  "tags": {
    "language": "C#",
    "type": "project"
  },
  "preferNameDirectory": true,
  "guids": [
    "GUIDPLACEHOLDER1",
    "GUIDPLACEHOLDER2",
    "GUIDPLACEHOLDER3"
  ],
  "sources": [
    {
      "modifiers": [
        {
          "condition": "(!skipRestore)",
          "exclude": [
            "**/[Bb]in/**",
            "**/[Oo]bj/**",
            "**/.template.config/**/*",
            "**/*.filelist",
            "**/*.user",
            "**/*.lock.json",
            "**/.vs/**",
            "**/logs/**"
          ]
        }
      ]
    }
  ],
  "symbols": {
    "skipRestore": {
      "type": "parameter",
      "datatype": "bool",
      "description": "Se especificado, pula a restauração automática dos pacotes NuGet na criação do projeto.",
      "defaultValue": "false"
    },
    "Framework": {
      "type": "parameter",
      "description": "Target framework para o projeto",
      "datatype": "choice",
      "choices": [
        {
          "choice": "net8.0",
          "description": ".NET 8.0"
        },
        {
          "choice": "net9.0",
          "description": ".NET 9.0"
        }
      ],
      "replaces": "net8.0",
      "defaultValue": "net8.0"
    },
    "Version": {
      "type": "parameter",
      "datatype": "string",
      "defaultValue": "1.0.0",
      "description": "Versão inicial do microserviço"
    },
    "DatabaseType": {
      "type": "parameter",
      "datatype": "choice",
      "choices": [
        {
          "choice": "none",
          "description": "Sem persistência de dados"
        },
        {
          "choice": "sqlserver",
          "description": "SQL Server com otimizações de performance"
        },
        {
          "choice": "postgresql",
          "description": "PostgreSQL com otimizações de performance"
        },
        {
          "choice": "mongodb",
          "description": "MongoDB com padrões NoSQL otimizados"
        }
      ],
      "defaultValue": "sqlserver",
      "description": "Tipo de banco de dados para persistência"
    },
    "UseKafka": {
      "type": "parameter",
      "datatype": "bool",
      "defaultValue": "false",
      "description": "Incluir adaptador de mensageria Apache Kafka com alta performance"
    },
    "UseRabbitMQ": {
      "type": "parameter",
      "datatype": "bool",
      "defaultValue": "false",
      "description": "Incluir adaptador de mensageria RabbitMQ otimizado"
    },
    "UseRedis": {
      "type": "parameter",
      "datatype": "bool",
      "defaultValue": "false",
      "description": "Incluir adaptador Redis para cache distribuído"
    },
    "UseMetrics": {
      "type": "parameter",
      "datatype": "bool",
      "defaultValue": "true",
      "description": "Incluir coleta de métricas com OpenTelemetry e Prometheus"
    },
    "UseHealthChecks": {
      "type": "parameter",
      "datatype": "bool",
      "defaultValue": "true",
      "description": "Incluir health checks detalhados para monitoramento"
    },
    "UseSwagger": {
      "type": "parameter",
      "datatype": "bool",
      "defaultValue": "true",
      "description": "Incluir documentação Swagger/OpenAPI"
    },
    "UseJwtAuth": {
      "type": "parameter",
      "datatype": "bool",
      "defaultValue": "true",
      "description": "Incluir autenticação JWT otimizada"
    },
    "UseResultPattern": {
      "type": "parameter",
      "datatype": "bool",
      "defaultValue": "true",
      "description": "Usar Result Pattern ao invés de exceptions para melhor performance"
    },
    "UseAsyncPatterns": {
      "type": "parameter",
      "datatype": "bool",
      "defaultValue": "true",
      "description": "Implementar padrões assíncronos otimizados para alta concorrência"
    },
    "IncludeDockerSupport": {
      "type": "parameter",
      "datatype": "bool",
      "defaultValue": "true",
      "description": "Incluir arquivos Docker otimizados para produção"
    },
    "IncludeK8sManifests": {
      "type": "parameter",
      "datatype": "bool",
      "defaultValue": "false",
      "description": "Incluir manifestos Kubernetes básicos"
    },
    "SqlServerCondition": {
      "type": "computed",
      "value": "(DatabaseType == \"sqlserver\")"
    },
    "PostgreSQLCondition": {
      "type": "computed",
      "value": "(DatabaseType == \"postgresql\")"
    },
    "MongoDbCondition": {
      "type": "computed",
      "value": "(DatabaseType == \"mongodb\")"
    },
    "NoDatabaseCondition": {
      "type": "computed",
      "value": "(DatabaseType == \"none\")"
    },
    "SqlDatabaseCondition": {
      "type": "computed",
      "value": "(DatabaseType == \"sqlserver\" || DatabaseType == \"postgresql\")"
    },
    "KafkaCondition": {
      "type": "computed",
      "value": "(UseKafka)"
    },
    "RabbitMQCondition": {
      "type": "computed",
      "value": "(UseRabbitMQ)"
    },
    "RedisCondition": {
      "type": "computed",
      "value": "(UseRedis)"
    },
    "MessagingCondition": {
      "type": "computed",
      "value": "(UseKafka || UseRabbitMQ)"
    },
    "CachingCondition": {
      "type": "computed",
      "value": "(UseRedis)"
    },
    "ObservabilityCondition": {
      "type": "computed",
      "value": "(UseMetrics || UseHealthChecks)"
    }
  },
  "sources": [
    {
      "source": "./",
      "target": "./",
      "modifiers": [
        {
          "condition": "(NoDatabaseCondition)",
          "exclude": [
            "src/**/Adapters/Outbound/Database/**",
            "src/**/Domain/Core/Interfaces/Outbound/I*Repository.cs",
            "src/**/Domain/Core/Interfaces/Outbound/I*ConnectionAdapter.cs"
          ]
        },
        {
          "condition": "(MongoDbCondition)",
          "exclude": [
            "src/**/Adapters/Outbound/Database/SQL/**"
          ]
        },
        {
          "condition": "(SqlDatabaseCondition)",
          "exclude": [
            "src/**/Adapters/Outbound/Database/NoSQL/**"
          ]
        },
        {
          "condition": "(!KafkaCondition)",
          "exclude": [
            "src/**/Adapters/Outbound/Messaging/Kafka/**"
          ]
        },
        {
          "condition": "(!RabbitMQCondition)",
          "exclude": [
            "src/**/Adapters/Outbound/Messaging/RabbitMQ/**"
          ]
        },
        {
          "condition": "(!RedisCondition)",
          "exclude": [
            "src/**/Adapters/Outbound/Cache/**"
          ]
        },
        {
          "condition": "(!UseMetrics)",
          "exclude": [
            "src/**/Adapters/Outbound/Metrics/**"
          ]
        },
        {
          "condition": "(!UseHealthChecks)",
          "exclude": [
            "src/**/Adapters/Inbound/HealthChecks/**"
          ]
        },
        {
          "condition": "(!UseSwagger)",
          "exclude": [
            "src/**/Extensions/SwaggerExtensions.cs"
          ]
        },
        {
          "condition": "(!UseJwtAuth)",
          "exclude": [
            "src/**/Extensions/JWTAuthConfiguration.cs",
            "src/**/Middleware/AuthenticationMiddleware.cs"
          ]
        },
        {
          "condition": "(!IncludeDockerSupport)",
          "exclude": [
            "Dockerfile",
            ".dockerignore",
            "docker-compose.yml",
            "docker-compose.override.yml"
          ]
        },
        {
          "condition": "(!IncludeK8sManifests)",
          "exclude": [
            "k8s/**"
          ]
        }
      ]
    }
  ],
  "forms": {
    "safe_name": {
      "identifier": "replace",
      "pattern": "(?<=namespace\\s+)[^\\s;]+",
      "replacement": "sourceName"
    }
  },
  "postActions": [
    {
      "description": "Restore NuGet packages",
      "manualInstructions": [
        {
          "text": "Execute 'dotnet restore' para restaurar os pacotes NuGet"
        }
      ],
      "actionId": "210D431B-A78B-4D2F-B762-4ED3E3EA9025",
      "continueOnError": true,
      "condition": "(!skipRestore)"
    },
    {
      "description": "Build solution",
      "manualInstructions": [
        {
          "text": "Execute 'dotnet build' para compilar a solução"
        }
      ],
      "actionId": "3A7C4B45-1F5D-4A30-960B-2576618C4E92",
      "continueOnError": true,
      "condition": "(!skipRestore)",
      "args": {
        "executable": "dotnet",
        "args": "build --no-restore --verbosity minimal"
      }
    }
  ],
  "primaryOutputs": [
    {
      "path": "src/microservice.api/microservice.api.csproj"
    },
    {
      "path": "microservice.api.sln"
    }
  ],
  "defaultName": "CleanArchMicroservice",
  "constraints": {
    "sdk-version": "[8.0.0,)"
  }
}